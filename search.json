[{"path":"https://rundel.github.io/checklist/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 Colin Rundel Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://rundel.github.io/checklist/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Colin Rundel. Author, maintainer.","code":""},{"path":"https://rundel.github.io/checklist/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Rundel C (2023). checklist: package running checks projects assignments. R package version 0.1.0, https://rundel.github.io/checklist.","code":"@Manual{,   title = {checklist: A package for running checks on projects and other assignments},   author = {Colin Rundel},   year = {2023},   note = {R package version 0.1.0},   url = {https://rundel.github.io/checklist}, }"},{"path":"https://rundel.github.io/checklist/index.html","id":"checklist","dir":"","previous_headings":"","what":"A package for running checks on projects and other assignments","title":"A package for running checks on projects and other assignments","text":"goal package provide variety tools checking RStudio project based assignments. tools specifically testing correctness assignment, rather testing process reproducibility assignment. example: project compile (knit) project include files want include Rmd document correct structure many ","code":""},{"path":"https://rundel.github.io/checklist/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A package for running checks on projects and other assignments","text":"can install development version package GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"rundel/checklist\")"},{"path":"https://rundel.github.io/checklist/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"A package for running checks on projects and other assignments","text":"Lets look simple example type assignment student might turnin, files available inst/examples/hw1 within repository, already installed package can also find directory using system.file(\"examples/hw1\", package=\"checklist\"). can now use checklist express simple checks files directory. example wanted make sure students submit knitted version homework use following check: Alternatively, may want prevent students turning knitted version (check reproducibility work) can done explicity Alternatively may instead want explicity files allowed (ensuring students added renamed anything), can default package ignores hidden files (files whose name starts .) can also check well using = TRUE argument. refine , may want allow .gitignore well .Rproj.user/ folder. can added files argument can even use standard glob wildcards make life easier,","code":"library(checklist) dir = system.file(\"examples/hw1\", package=\"checklist\")  # Show the project contents fs::dir_tree(dir) #> /Users/rundel/Library/R/arm64/4.3/library/checklist/examples/hw1 #> ├── README.md #> ├── fizzbuzz.png #> ├── hw1.Rmd #> └── hw1.Rproj check_required_files(\"hw1.md\", dir) #> The following required files are missing: #> ──────────────────────────────────────────────────────────────────────────────── #> ✖ hw1.md check_disallowed_files(\"hw1.md\", dir) check_allowed_files(c(\"README.md\", \"fizzbuzz.png\", \"hw1.Rmd\", \"hw1.Rproj\"), dir) check_allowed_files(c(\"README.md\", \"fizzbuzz.png\", \"hw1.Rmd\", \"hw1.Rproj\"), dir, all = TRUE) #> Disallowed files found: (please remove the following files) #> ──────────────────────────────────────────────────────────────────────────────── #> ✖ .hidden check_allowed_files(   c(\"README.md\", \"fizzbuzz.png\", \"hw1.Rmd\", \"hw1.Rproj\", \".gitignore\", \".Rproj.user/*\"),    dir, all = TRUE ) #> Disallowed files found: (please remove the following files) #> ──────────────────────────────────────────────────────────────────────────────── #> ✖ .hidden"},{"path":"https://rundel.github.io/checklist/reference/check_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for allowed or disallowed files in a project or directory — check_files","title":"Check for allowed or disallowed files in a project or directory — check_files","text":"Check allowed disallowed files project directory","code":""},{"path":"https://rundel.github.io/checklist/reference/check_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for allowed or disallowed files in a project or directory — check_files","text":"","code":"find_files(   files,   dir = here::here(),   all = FALSE,   recurse = TRUE,   type = c(\"file\", \"directory\", \"any\"),   regex = FALSE,   invert = FALSE )  check_allowed_files(   files,   dir = here::here(),   all = FALSE,   recurse = TRUE,   type = c(\"file\", \"directory\", \"any\"),   regex = FALSE )  check_disallowed_files(files, dir = here::here(), regex = FALSE)  check_required_files(files, dir = here::here())"},{"path":"https://rundel.github.io/checklist/reference/check_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for allowed or disallowed files in a project or directory — check_files","text":"files Character vector allowed file names dir Directory check TRUE include hidden files recurse TRUE recurse fully, positive number number levels recurse type File type return, one \"file\", \"directory\", \"\" regex TRUE use allowed_files regular expression otherwise assume wildcard (glob) patterns invert TRUE return files match","code":""},{"path":"https://rundel.github.io/checklist/reference/check_files.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Check for allowed or disallowed files in a project or directory — check_files","text":"find_files(): Find files match given pattern (glob regex) within given directory check_allowed_files(): Check allowed file(s) exist check_disallowed_files(): Check disallowed file(s) exist check_required_files(): Check required file(s) exist","code":""},{"path":"https://rundel.github.io/checklist/reference/check_pkgs.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for allowed or disallowed package dependencies within a project or directory — check_pkgs","title":"Check for allowed or disallowed package dependencies within a project or directory — check_pkgs","text":"Check allowed disallowed package dependencies within project directory","code":""},{"path":"https://rundel.github.io/checklist/reference/check_pkgs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for allowed or disallowed package dependencies within a project or directory — check_pkgs","text":"","code":"installed_pkgs()  missing_pkgs(   dir = here::here(),   glob = \"*.R$|*.r$|*.Rmd$|*.rmd$|*.Rnw$|*.rnw|*.Qmd|*.qmd$\",   recurse = TRUE )  install_missing_pkgs(   dir = here::here(),   glob = \"*.R$|*.r$|*.Rmd$|*.rmd$|*.Rnw$|*.rnw|*.Qmd|*.qmd$\",   recurse = TRUE,   ... )  find_pkgs(   dir = here::here(),   glob = \"*.R$|*.r$|*.Rmd$|*.rmd$|*.Rnw$|*.rnw|*.Qmd|*.qmd$\",   full = FALSE,   recurse = TRUE )  check_allowed_pkgs(   pkgs,   dir = here::here(),   glob = \"*.R$|*.r$|*.Rmd$|*.rmd$|*.Rnw$|*.rnw|*.Qmd|*.qmd$\",   full = FALSE,   recurse = TRUE )  check_disallowed_pkgs(   pkgs,   dir = here::here(),   glob = \"*.R$|*.r$|*.Rmd$|*.rmd$|*.Rnw$|*.rnw|*.Qmd|*.qmd$\",   full = FALSE,   recurse = TRUE )  check_required_pkgs(   pkgs,   dir = here::here(),   glob = \"*.R$|*.r$|*.Rmd$|*.rmd$|*.Rnw$|*.rnw|*.Qmd|*.qmd$\",   full = FALSE,   recurse = TRUE )"},{"path":"https://rundel.github.io/checklist/reference/check_pkgs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for allowed or disallowed package dependencies within a project or directory — check_pkgs","text":"dir Directory search. glob File types search , defaults R, Rmd, Rnw files. recurse directory recursively explored (.e. match files sub directories) ... Additional arguments passed install.packages(). full full data frame dependencies returned just vector package names. pkgs Character vector package names","code":""},{"path":"https://rundel.github.io/checklist/reference/check_pkgs.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Check for allowed or disallowed package dependencies within a project or directory — check_pkgs","text":"installed_pkgs(): Returns vector installed packages. missing_pkgs(): Returns vector packages found find_pkgs currently installed. install_missing_pkgs(): Installs missing packages found missing_pkgs. find_pkgs(): Find packages used within project using renv. check_allowed_pkgs(): Check allowed packages used check_disallowed_pkgs(): Check disallowed packages used check_required_pkgs(): Check required packages used","code":""},{"path":"https://rundel.github.io/checklist/reference/check_qmd_renders.html","id":null,"dir":"Reference","previous_headings":"","what":"Check a qmd file renders using Quarto — check_qmd_renders","title":"Check a qmd file renders using Quarto — check_qmd_renders","text":"Check qmd file renders using Quarto","code":""},{"path":"https://rundel.github.io/checklist/reference/check_qmd_renders.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check a qmd file renders using Quarto — check_qmd_renders","text":"","code":"check_qmd_renders(file, install_missing = FALSE, update_packages = FALSE, ...)"},{"path":"https://rundel.github.io/checklist/reference/check_qmd_renders.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check a qmd file renders using Quarto — check_qmd_renders","text":"file Path qmd file install_missing missing packages installed. Default FALSE. update_packages installed packages updated rendering. Default FALSE. ... Additional arguments pass quarto_render()","code":""},{"path":"https://rundel.github.io/checklist/reference/check_rmd_renders.html","id":null,"dir":"Reference","previous_headings":"","what":"Check an Rmd file renders using rmarkdown — check_rmd_renders","title":"Check an Rmd file renders using rmarkdown — check_rmd_renders","text":"Check Rmd file renders using rmarkdown","code":""},{"path":"https://rundel.github.io/checklist/reference/check_rmd_renders.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check an Rmd file renders using rmarkdown — check_rmd_renders","text":"","code":"check_rmd_renders(file, install_missing = FALSE, update_packages = FALSE, ...)"},{"path":"https://rundel.github.io/checklist/reference/check_rmd_renders.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check an Rmd file renders using rmarkdown — check_rmd_renders","text":"file Path Rmd file install_missing missing packages installed. Default FALSE. update_packages installed packages updated rendering. Default FALSE. ... Additional arguments pass render()","code":""},{"path":"https://rundel.github.io/checklist/reference/quit_on_failure.html","id":null,"dir":"Reference","previous_headings":"","what":"Quit on Failure — quit_on_failure","title":"Quit on Failure — quit_on_failure","text":"Evaluate given expression returned values FALSE exit status 1.","code":""},{"path":"https://rundel.github.io/checklist/reference/quit_on_failure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quit on Failure — quit_on_failure","text":"","code":"quit_on_failure(expr, n_br = 1)"},{"path":"https://rundel.github.io/checklist/reference/quit_on_failure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quit on Failure — quit_on_failure","text":"expr Expression returning logical vector n_br Number leading trailing blank lines print","code":""},{"path":"https://rundel.github.io/checklist/reference/quit_on_failure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quit on Failure — quit_on_failure","text":"expr","code":""},{"path":"https://rundel.github.io/checklist/reference/quit_on_failure.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Quit on Failure — quit_on_failure","text":"needed using check_* functions within continuous integration pipeline signal step failed.","code":""},{"path":"https://rundel.github.io/checklist/news/index.html","id":"checklist-010","dir":"Changelog","previous_headings":"","what":"checklist 0.1.0","title":"checklist 0.1.0","text":"Initial version checklist Added NEWS.md file track changes package.","code":""}]
