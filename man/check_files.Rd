% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/check_files.R
\name{check_files}
\alias{check_files}
\alias{find_files}
\alias{check_allowed_files}
\alias{check_disallowed_files}
\alias{check_required_files}
\title{Check for allowed or disallowed files in a project or directory}
\usage{
find_files(
  files,
  dir = here::here(),
  all = FALSE,
  recurse = TRUE,
  type = c("file", "directory", "any"),
  regex = FALSE,
  invert = FALSE
)

check_allowed_files(
  files,
  dir = here::here(),
  all = FALSE,
  recurse = TRUE,
  type = c("file", "directory", "any"),
  regex = FALSE
)

check_disallowed_files(files, dir = here::here(), regex = FALSE)

check_required_files(files, dir = here::here())
}
\arguments{
\item{files}{Character vector of allowed file names}

\item{dir}{Directory to check}

\item{all}{If \code{TRUE} include hidden files}

\item{recurse}{If \code{TRUE} recurse fully, if a positive number
the number of levels to recurse}

\item{type}{File type to return, one of "file", "directory", or "any"}

\item{regex}{If \code{TRUE} use \code{allowed_files} as a regular expression
otherwise assume wildcard (glob) patterns}

\item{invert}{If \code{TRUE} return files which do \emph{not} match}
}
\description{
Check for allowed or disallowed files in a project or directory
}
\section{Functions}{
\itemize{
\item \code{find_files}: Find all files that match the given pattern (glob or regex)
within the given directory

\item \code{check_allowed_files}: Check that only the allowed file(s) exist

\item \code{check_disallowed_files}: Check if any disallowed file(s) exist

\item \code{check_required_files}: Check that the required file(s) exist
}}

